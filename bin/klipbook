#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require 'gli'
require 'klipbook'

include GLI::App

program_desc "Collates the clippings you've saved on your Kindle into a nice html summary for each book."

version Klipbook::VERSION

desc 'Number of books to process'
arg_name 'count'
default_value 1
flag [:n, :'num-books']

desc 'Collate your clippings into a html file for each book'
arg_name 'source'
long_desc "Clippings are fetched from the specified source before being collated into a html file.\n\n" +
          "Two sources are currently supported: a file from a Kindle device and the Kindle site itself.\n\n" +
          "Example file formats:\n\n" +
          "   file:path/to/my-clippings-file.txt\n\n" +
          "   site:my-kindle-user@blah.com:my-kindle-password"
command :collate do |c|

  c.desc 'The directory path where collated files are written'
  c.default_value Dir.pwd
  c.arg_name 'Directory'
  c.flag [:o, :'output-dir']

  c.desc 'Force overwrite of any existing collated files'
  c.switch [:f, :force]

  c.action do |globals,options,args|
    books = fetch_books(args, globals)
    Klipbook::Collator.new(books).collate_books(options[:o], options[:f])
  end
end

desc 'List available books'
arg_name 'source'
long_desc "Clippings are fetched from the specified source before being listed to screen.\n\n" +
          "Two sources are currently supported: a file from a Kindle device and the Kindle site itself.\n\n" +
          "Example file formats:\n\n" +
          "   file:path/to/my-clippings-file.txt\n\n" +
          "   site:my-kindle-user@blah.com:my-kindle-password"
command :list do |c|
  c.action do |globals,options,args|
    books = fetch_books(args, globals)
    Klipbook::Printer.new(books).print
  end
end

pre do |globals,command,options,args|
  all_good = true

  unless source_spec(args)
    raise InvalidSourceError
  end

  if options[:o] && !File.exist?(options[:o])
    $stderr.puts "Output directory doesn't exist: #{options[:o]}"
    all_good = false
  end

  if globals[:n].to_i == 0
    $stderr.puts 'Specify a number of books greater than 0'
    all_good = false
  end

  all_good
end

def source_spec(args)
  @source_spec ||= (args[0] || Klipbook::Config.new.read[:source])
end

def fetch_books(args, globals)
  Klipbook::Fetcher.new(source_spec(args), globals[:n].to_i).fetch_books
end

exit run(ARGV)

